generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body String
  category String
  link String?
  nsfw Boolean
  author User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  votes Vote[]
  comments Comment[]
  savedPost SavedPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userName String @unique
  email String @unique
  password String
  image String?
  isAdmin Boolean
  posts Post[]
  votes Vote[]
  comments Comment[]
  commentVotes CommentVote[]
  savedPost SavedPost[]
  notifications Notification[]
  messages Message[]

  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  conversationIds String[] @db.ObjectId

  @@map("users")
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId @unique
  type VoteType

  @@map("votes")
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  message String
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  userName String @unique
  profileImg String?
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId @unique
  parent Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId @unique
  children Comment[] @relation("ParentChild")
  commentVotes CommentVote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model CommentVote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String @db.ObjectId @unique
  type VoteType

  @@map("commentvotes")
}

model SavedPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("savedposts")
}

enum SubjectType {
  POST
  COMMENT
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  subject SubjectType
  subjectId String @db.ObjectId @unique
  fromUserId String @db.ObjectId @unique
  readed Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  messages Message[]

  users User[] @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}
